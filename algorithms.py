def chebyApprox(funct,x,order):
    """
    Purpose: given a target function, an order of expansion, and an array 'x' compute the chebyshev expansion of the given order approximating funct.
    """
    alpha=at2(order,funct)
    return at1(x,alpha)

def at1(x,a):
    """       
     Purpose: given x and an array of numbers a
              the call

              value=at1(x,a) 

              calculates the value of the Chebyshev series
               n
              sum  a    T (x)
              s=0   s    s
              using algorithm AT1 from the lectures.

     Input:

      x  =  vector of values at which sum is to be calculated;
      a  =  vector with a[0],...,a[n] containing the expansion      
             coefficients in the Chebyshev series.

     The vector of values x could for instance be generated by
     x=-1:0.1:1  
     Output:

     value = vector containing the values of the Chebyshev series
             for the input values of x.

    """

# set up the initial values of the variables
    bmiddle =0
    bhigh   =0
    x2      =2*x
    n=len(a)-1;
    
# perform the iterative steps in a loop
    for s in range(n,-1,-1):
        # fill in the iterative steps for algorithm AT1 here
        b=x2*bmiddle-bhigh+a[s];
        bhigh=bmiddle;
        bmiddle=b;
        
# calculate the return value
    value = bmiddle - x*bhigh;

    return (value)

def at2(n,funct):
    import numpy as np
    """
    Purpose: the call 
    
        alpha=at2(n) 
    
    calculates the expansion of a given function in 
    Chebyshev polynomials in the form
         n
        sum'' alpha[i] T (x)   
        i=0             i
        ('' denotes first and last terms halved)
                
    using algorithm AT2 from the lectures. 
    
    --------------------------------------------------------------------
     
     Input:
    
     The function to be expanded: it should be defined in a separate function
    For example, if you wish to apply the 
    Chebyshev expansion to exp(x), then 
    you could define a function
    
        def funct(x):
            return exp(x)
                          
     n  =  degree of the expansion.
    
     Output:
    
    alpha  =  vector with alpha[0]...,alpha[n] containing the
    expansion coefficients. 
    
    """
#--------------------------------------------------------------------
#      
# Calculate the points x(j)=cos(pi*j/n) using algorithm ATXJ
#
    c=np.cos(np.pi/n);
    c2=2*c;
    xlow=1;
    xmiddle=c;
    x=np.zeros(n+1)
    
    for j in range(n+1):
        # the iterative steps of algorithm ATXJ:
        x[j]=xlow
        xhigh =c2*xmiddle- xlow
        xlow=xmiddle
        xmiddle = xhigh
        
        a=funct(x)
#
# Here, remember to define the function you wish to approximate 
# 
# Redefine a(0) and a(n) in preparation for evaluating alpha:
# 
    a[0]=0.5*a[0]
    a[n]=0.5*a[n]
        
# Calculate alpha[0],...,alpha[n]  by using AT1. We can do this in one go by:
# 
    alpha=(2/n)*at1(x,a);
#
# The array alpha is now ready. 
# 
# Now use it. You can use AT1 again to sum the Chebyshev series 
#                    n
#                   sum'' alpha[i] T (x)   
#                   i=0             i
# for your function. To do so, you must re-set:
# 
    alpha[0]=0.5*alpha[0]   
    alpha[n]=0.5*alpha[n]
#
# as the double prime on the summation means you half the first and last terms

    return(alpha)